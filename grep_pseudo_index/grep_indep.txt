03-Gaussians.ipynb:    "A remarkable property of Gaussian random variables is that the sum of two independent Gaussian random variables is also normally distributed! The product is not Gaussian, but proportional to a Gaussian. There we can say that the result of multipying two Gaussian distributions is a Gaussian function (recall function in this context means that the property that the values sum to one is not guaranteed).\n",
03-Gaussians.ipynb:    "The product of two independent Gaussians is given by:\n",
03-Gaussians.ipynb:    "To find the density function of the sum of two Gaussian random variables we sum the density functions of each. They are nonlinear, continuous functions, so we need to compute the sum with an integral. If the random variables $p$ and $z$ (e.g. prior and measurement) are independent we can compute this with\n",

cm-1-reading-notes.md:independent, **even though P(S2B) and P(M1) are not**. 
cm-1-reading-notes.md:Then from (II) and P(S2B|S1A) and P(M1|S1A) being independent, we have:

08-Designing-Kalman-Filters.ipynb:    "Here I assume the noise in x and y are independent, so the covariances between any x and y variable should be zero. This allows me to compute $\\mathbf Q$ for one dimension, and then use `block_diag` to copy it for the x and y axis."
08-Designing-Kalman-Filters.ipynb:    "Inputs to the Kalman filter must be *Gaussian* and *time independent*. This is because we imposed the requirement of the Markov property: the current state is dependent only on the previous state and current inputs. This makes the recursive form of the filter possible. The output of the GPS is *time dependent* because the filter bases its current estimate on the recursive estimates of all previous measurements. Hence, the signal is not white, it is not time independent, and if you pass that data into a Kalman filter you have violated the mathematical requirements of the filter. So, the answer is no, you cannot get better estimates by running a KF on the output of a commercial GPS. \n",
08-Designing-Kalman-Filters.ipynb:    "Because we don't have real data we will start by writing a simulator for a ball. As always, we add a noise term independent of time so we can simulate noisy sensors."
08-Designing-Kalman-Filters.ipynb:    "As with the robot, we will assume that the error is independent in $x$ and $y$. In this case we will start by assuming that the measurement errors in x and y are 0.5 meters squared. Hence,\n",

10-Unscented-Kalman-Filter.ipynb:    "Let's tackle our first nonlinear problem. We will write a filter to track an airplane using radar as the sensor. To keep the problem as similar to the previous one as possible we will track in two dimensions. We will track one dimension on the ground and the altitude of the aircraft. Each dimension is independent so we can do this with no loss of generality.\n",
10-Unscented-Kalman-Filter.ipynb:    "The design of $\\mathbf Q$ requires some discussion. The state is $\\begin{bmatrix}x & \\dot x & y\\end{bmatrix}^\\mathtt{T}$. The first two elements are down range distance and velocity, so we can use `Q_discrete_white_noise` noise to compute the values for the upper left hand side of Q. The third element is altitude, which we assume is independent of $x$. That results in a block design for $\\mathbf Q$:\n",
10-Unscented-Kalman-Filter.ipynb:    "It is reasonable to assume that the range and bearing measurement noise is independent, hence\n",

11-Extended-Kalman-Filters.ipynb:    "The variables $x$ and $y$ are independent so we can compute them separately. The differential equations for motion in one dimension are:\n",
11-Extended-Kalman-Filters.ipynb:    "The design of $\\mathbf Q$ requires some discussion. The state $\\mathbf x= \\begin{bmatrix}x & \\dot x & y\\end{bmatrix}^\\mathtt{T}$. The first two elements are position (down range distance) and velocity, so we can use `Q_discrete_white_noise` noise to compute the values for the upper left hand side of $\\mathbf Q$. The third element of  $\\mathbf x$ is altitude, which we are assuming is independent of the down range distance. That leads us to a block design of $\\mathbf Q$ of:\n",
11-Extended-Kalman-Filters.ipynb:    "It is reasonable to assume that the noise of the range and bearing measurements are independent, hence\n",

14-Adaptive-Filtering.ipynb:    "Now we can implement a Kalman filter to track this object. But let's make a simplification. The *x* and *y* coordinates are independent, so we can track each independently. In the remainder of this chapter we will only track the *x* coordinate to keep the code and matrices as small as possible. \n",
